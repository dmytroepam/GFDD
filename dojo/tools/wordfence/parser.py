from html2text import html2text
import json
from dojo.models import Endpoint, Finding


class WordfenceParser(object):
    """Parser for XML file generated by the OWASP Zed Attacl Proxy (ZAP) tool https://www.zaproxy.org/."""

    MAPPING_SEVERITY = {"20": "Info", "50": "Low", "70": "Medium", "100": "High"}
    MAPPING_CONFIDENCE = {
        # "0": ??? CONFIDENCE_FALSE_POSITIVE => we don't do anything for now. it seems that the tool doesn't export them (filtered)
        "50": 7,  # CONFIDENCE_LOW => Tentative
        "70": 4,  # CONFIDENCE_MEDIUM => Firm
        "100": 1,  # CONFIDENCE_HIGH => Certain
        "0": 1,  # CONFIDENCE_USER_CONFIRMED => Certain
    }

    def get_scan_types(self):
        return ["Wordfence Scan"]

    def get_label_for_scan_types(self, scan_type):
        return "Wordfence Scan"

    def get_description_for_scan_types(self, scan_type):
        return "Wordfence report format"

    def get_findings(self, file, test):
        tree = json.load(file)
        items = list()
        for item in tree:
            finding = Finding(
                test=test,
                title=item["type"],
                description=html2text(item["shortMsg"]),
                severity=self.MAPPING_SEVERITY.get(item["severity"]),
                scanner_confidence=self.MAPPING_CONFIDENCE.get(item["severity"]),
                mitigation=html2text(item["longMsg"]),
                references=html2text(item["shortMsg"]),
                dynamic_finding=True,
                static_finding=False,
                vuln_id_from_tool=item["id"],
            )
            if item.get("cweid") is not None and item.get("cweid").isdigit():
                finding.cwe = int(item.get("cweid"))

            finding.unsaved_endpoints = []
            finding.unsaved_req_resp = []
            if item.get('instances/instance') is not None:
                for instance in item.get("instances/instance"):
                    endpoint = Endpoint.from_uri(instance.findtext("uri"))
                    request = f"{instance.findtext('method')} {endpoint.query}#{endpoint.fragment}"
                    # we remove query and fragment because with some configuration
                    # the tool generate them on-the-go and it produces a lot of fake endpoints
                    endpoint.query = None
                    endpoint.fragment = None
                    finding.unsaved_endpoints.append(endpoint)
                    finding.unsaved_req_resp.append({"req": request, "resp": f"{instance.findtext('evidence')}"})
            items.append(finding)
        return items

